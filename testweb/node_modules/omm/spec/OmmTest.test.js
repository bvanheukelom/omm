/**
 * Created by bert on 22.03.16.
 */
/// <reference path="../typings/jasmine/jasmine.d.ts"/>
/// <reference path="../typings/underscore/underscore.d.ts"/>
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var omm = require("../src/omm");
var Tests = require("../spec/classes/Tests");
var Mocks = require("./Mocks");
xdescribe("The test omm", function () {
    var mockMongo;
    var mockMeteor;
    beforeAll(function () {
        mockMongo = new Mocks.MockMongo();
        mockMeteor = new Mocks.MockMeteor();
        omm.config({
            Meteor: mockMeteor,
            Mongo: mockMongo
        });
        Tests.TestPersonCollection.init();
        Tests.TestTreeCollection.init();
        mockMeteor.runAllStartup();
    });
    it("configs the mock mongo", function () {
        expect(omm.getMongo()).toBe(mockMongo);
        expect(omm.getMongo().ObjectID()).toBe("1");
    });
    it("runs a test", function () {
        var EClass = (function () {
            function EClass() {
            }
            EClass = __decorate([
                omm.Entity
            ], EClass);
            return EClass;
        }());
        var c = new omm.Collection(EClass, "users");
        expect(c.getMeteorCollection()['name']).toBe("users");
    });
    it("stores a thing", function () {
        var EClass = (function () {
            function EClass() {
            }
            EClass = __decorate([
                omm.Entity
            ], EClass);
            return EClass;
        }());
        var c = new omm.Collection(EClass, "assa");
        var ec = new EClass();
        ec.jim = "JIM";
        var id = c.insert(ec);
        expect(id).toBeDefined();
        expect(c.getById(id).jim).toBe("JIM");
    });
});
//# sourceMappingURL=OmmTest.test.js.map