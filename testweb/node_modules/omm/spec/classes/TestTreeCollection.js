/**
 * Created by bert on 13.05.15.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var omm = require("../../src/omm");
var Tests = require("./Tests");
var TestTreeCollection = (function (_super) {
    __extends(TestTreeCollection, _super);
    function TestTreeCollection() {
        _super.call(this, Tests.TestTree, "TheTreeCollection");
    }
    TestTreeCollection.prototype.newTree = function (initialHeight, callback) {
        var t = new Tests.TestTree(initialHeight);
        var that = this;
        try {
            var id = this.insert(t, function (err, id) {
                if (err) {
                    callback(err);
                }
                else {
                    var t = that.getById(id);
                    if (!t)
                        debugger;
                    callback(undefined, t);
                }
            });
        }
        catch (err) {
            callback(err);
        }
    };
    TestTreeCollection.prototype.errorMethod = function (initialHeight, callback) {
        callback("the error");
    };
    TestTreeCollection.prototype.deleteTree = function (treeId, cb) {
        this.remove(treeId, cb);
    };
    TestTreeCollection.prototype.serverFunction = function (treeId, t, n, cb) {
        cb(undefined, "Hello " + treeId + "! This is on the " + (omm.getMeteor().isServer ? "server" : "client") + " t:" + (t instanceof Tests.TestTree) + " " + t.getHeight() + " n:" + n + " " + (typeof n));
    };
    TestTreeCollection.prototype.removeAllTrees = function (callback) {
        var _this = this;
        this.find({}).forEach(function (tt) {
            _this.remove(tt.treeId);
        });
        callback();
    };
    TestTreeCollection.init = function () {
        if (!TestTreeCollection.isInitialized) {
            TestTreeCollection.isInitialized = true;
            omm.getMeteor().startup(function () {
                Tests.registeredTestTreeCollection = new Tests.TestTreeCollection();
                omm.registerObject('TestTreeCollection', Tests.registeredTestTreeCollection);
            });
        }
    };
    TestTreeCollection.isInitialized = false;
    __decorate([
        omm.MeteorMethod({ object: 'TestTreeCollection', replaceWithCall: true, serverOnly: true, parameterTypes: ["number", "callback"] })
    ], TestTreeCollection.prototype, "newTree", null);
    __decorate([
        omm.MeteorMethod({ object: 'TestTreeCollection', replaceWithCall: true, serverOnly: true, parameterTypes: ["number", "callback"] })
    ], TestTreeCollection.prototype, "errorMethod", null);
    __decorate([
        omm.MeteorMethod({ object: 'TestTreeCollection', replaceWithCall: true, parameterTypes: ["string", "callback"] })
    ], TestTreeCollection.prototype, "deleteTree", null);
    __decorate([
        omm.MeteorMethod({ object: 'TestTreeCollection', replaceWithCall: true, parameterTypes: ["string", "TestTree", "number", "callback"] })
    ], TestTreeCollection.prototype, "serverFunction", null);
    __decorate([
        omm.MeteorMethod({ object: 'TestTreeCollection', replaceWithCall: true, parameterTypes: ["callback"] })
    ], TestTreeCollection.prototype, "removeAllTrees", null);
    return TestTreeCollection;
}(omm.Collection));
exports.TestTreeCollection = TestTreeCollection;
//# sourceMappingURL=TestTreeCollection.js.map