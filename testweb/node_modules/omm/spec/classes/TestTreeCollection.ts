/**
 * Created by bert on 13.05.15.
 */

import * as omm from "../../src/omm"
import * as Tests from "./Tests"

export class TestTreeCollection extends omm.Collection<Tests.TestTree> {
    constructor() {
        super(Tests.TestTree,"TheTreeCollection");
    }
    @omm.MeteorMethod({object:'TestTreeCollection', replaceWithCall:true, parameterTypes:["number","callback"]})
    newTree(initialHeight:number, callback:(err:any, tree?:Tests.TestTree)=>void):void {
        var t:Tests.TestTree = new Tests.TestTree(initialHeight);
        var that = this;
        try {
            console.log("inserting new Tree "+initialHeight);
            var id:string = this.insert( t, function(err,id:string){
                if( err ){
                    callback(err);
                } else {
                    var t = that.getById(id);
                    console.log("done inserting new Tree "+initialHeight+" got :", t );
                    if( !t )
                        debugger;
                    callback(undefined, t);
                }
            });
        } catch (err) {
            callback(err);
        }
    }
    @omm.MeteorMethod({object:'TestTreeCollection', replaceWithCall:true, serverOnly:true, parameterTypes:["number","callback"]})
    errorMethod(initialHeight:number, callback:(err:any, result?:any)=>void):void {
        callback("the error");
    }

    @omm.MeteorMethod({object:'TestTreeCollection', replaceWithCall:true, parameterTypes:["string","callback"]})
    deleteTree(treeId:string, cb:(err:any)=>void) {
        this.remove(treeId, cb);
    }

    @omm.MeteorMethod({object:'TestTreeCollection', replaceWithCall:true, parameterTypes:[ "string", "TestTree", "number", "callback" ]})
    serverFunction(treeId:string, t:Tests.TestTree, n:number, cb:(e:any, r:string)=>void) {
        cb(undefined, "Hello " + treeId + "! This is on the " + (omm.getMeteor().isServer ? "server" : "client") + " t:" + (t instanceof Tests.TestTree) + " " + t.getHeight() + " n:" + n + " " + (typeof n));
    }

    @omm.MeteorMethod({object:'TestTreeCollection', replaceWithCall:true, parameterTypes:["callback"]})
    removeAllTrees(  callback:(err?:any)=>void ) : void {
        console.log("removing all trees");
        this.find({}).forEach((tt:Tests.TestTree)=>{
            this.remove(tt.treeId);
        });
        callback();
    }


    static isInitialized:boolean = false;
    static init() {
        if( !TestTreeCollection.isInitialized ) {
            TestTreeCollection.isInitialized = true;
            omm.getMeteor().startup(function () {
                if (omm.getMeteor().isServer) {
                    omm.getMeteor().publish("trees", function () {
                        return omm.Collection.getByName("TheTreeCollection").getMeteorCollection().find({});
                    });
                }
                else {
                    omm.getMeteor().subscribe("trees");
                }
                Tests.registeredTestTreeCollection = new Tests.TestTreeCollection();
                omm.registerObject('TestTreeCollection', Tests.registeredTestTreeCollection);
            });
        }
    }

}

export var registeredTestTreeCollection : Tests.TestTreeCollection;

