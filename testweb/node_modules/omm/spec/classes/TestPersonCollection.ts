
import * as omm from "../../src/omm"
import * as Tests from "./Tests"

export class TestPersonCollection extends omm.Collection<Tests.TestPerson> {
    constructor() {
        super(Tests.TestPerson);
    }

    @omm.MeteorMethod({object:'TestPersonCollection', replaceWithCall:true, parameterTypes:["string","callback"]})
    newPerson(n:string, callback:(err:any, tree?:Tests.TestPerson)=>void):void {
        var p:Tests.TestPerson = new Tests.TestPerson();
        p.name = n;
        var that = this;
        this.insert(p, function (e:any, id:string) {
            callback(e, id ? that.getById(id) : undefined);
        });
    }

    @omm.MeteorMethod({object:'TestPersonCollection'})
    insertPerson(n:string):Tests.TestPerson {
        var p:Tests.TestPerson = new Tests.TestPerson();
        p.name = n;
        var that = this;
        var id = this.insert(p);
        return this.getById(id);
    }

    @omm.StaticMeteorMethod
    static staticInsertPerson(n:string):Tests.TestPerson {
        var personCollection:Tests.TestPersonCollection = omm.getRegisteredObject("TestPersonCollection");
        var p:Tests.TestPerson = new Tests.TestPerson();
        p.name = n;
        var id = personCollection.insert(p);
        return personCollection.getById(id);
    }

    @omm.StaticMeteorMethod('helloWorld', {parameterTypes:['string']})
    static staticInsertPerson2(n:string):Tests.TestPerson {
        var personCollection:Tests.TestPersonCollection = omm.getRegisteredObject("TestPersonCollection");
        var p:Tests.TestPerson = new Tests.TestPerson();
        p.name = n;
        var id = personCollection.insert(p);
        return personCollection.getById(id);
    }

    @omm.MeteorMethod({object:'TestPersonCollection', replaceWithCall:true, parameterTypes:["TestPerson", "TestPerson", "callback"]})
    haveBaby(mom:Tests.TestPerson, dad:Tests.TestPerson, callback:(err:any, p?:Tests.TestPerson)=>void):void {
        //console.log("mom: ", mom);
        //console.log("dad: ", dad);
        var kid:Tests.TestPerson = new Tests.TestPerson();
        kid.name = "child of " + mom.name + " and " + dad.name;
        kid.family["mom"] = mom;
        kid.family["dad"] = dad;
        var that = this;
        this.insert(kid, function (e:any, id:string) {
            //console.log("The baby is inserted into the database");
            callback(e, id ? that.getById(id) : undefined);
        });
    }

    @omm.MeteorMethod({object:'TestPersonCollection', replaceWithCall:true, parameterTypes:["string", "callback"]})
    removePerson( id:string, callback:(err:any)=>void ) : void {
        this.remove(id, callback);
    }

    @omm.MeteorMethod({object:'TestPersonCollection', replaceWithCall:true, parameterTypes:["callback"]})
    removeAllPersons(  callback:(err?:any)=>void ) : void {
        this.find({}).forEach( (testPerson:Tests.TestPerson) => {
            this.remove(testPerson.getId());
        });
        callback();
    }

    static init() {
        omm.getMeteor().startup(function () {
            if (omm.getMeteor().isServer) {
                omm.getMeteor().publish("persons", function () {
                    return omm.Collection.getByName("TestPerson").getMeteorCollection().find({});
                });
            }
            else {
                omm.getMeteor().subscribe("persons");
            }
            omm.registerObject('TestPersonCollection', new Tests.TestPersonCollection());
        });
    }
}


