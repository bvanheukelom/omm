"use strict";
var SerializationPath = (function () {
    function SerializationPath(objectRetriever, className, id) {
        this.path = className;
        this.objectRetriever = objectRetriever;
        if (id)
            this.path += "[" + id + "]";
        if (!this.getId())
            throw new Error("id is undefined");
    }
    SerializationPath.prototype.clone = function () {
        return new SerializationPath(this.objectRetriever, this.path);
    };
    SerializationPath.prototype.getCollectionName = function () {
        return this.path.split("[")[0];
    };
    SerializationPath.prototype.getObjectRetriever = function () {
        return this.objectRetriever;
    };
    SerializationPath.prototype.getId = function () {
        return this.path.split("[")[1].split("]")[0];
    };
    SerializationPath.prototype.forEachPathEntry = function (iterator) {
        if (this.path.indexOf(".") != -1)
            this.path.split("].")[1].split(".").forEach(function (entry) {
                var propertyName = entry;
                var index = undefined;
                if (entry.indexOf("|") != -1) {
                    propertyName = entry.split("|")[0];
                    index = entry.split("|")[1];
                }
                iterator(propertyName, index);
            });
    };
    SerializationPath.prototype.getSubObject = function (rootObject) {
        var o = rootObject;
        if (this.path.indexOf(".") != -1) {
            this.path.split("].")[1].split(".").forEach(function (entry) {
                if (o) {
                    if (entry.indexOf("|") != -1) {
                        var p = entry.split("|");
                        var arrayOrMap = o[p[0]];
                        var id = p[1];
                        var foundEntry = false;
                        for (var j in arrayOrMap) {
                            var arrayEntry = arrayOrMap[j];
                            if (arrayEntry.getId && arrayEntry.getId() == id) {
                                o = arrayEntry;
                                foundEntry = true;
                                break;
                            }
                        }
                        if (!foundEntry) {
                            if (arrayOrMap[id])
                                o = arrayOrMap[id];
                            else
                                o = undefined;
                        }
                    }
                    else
                        o = o[entry];
                }
            });
        }
        return o;
    };
    SerializationPath.prototype.appendArrayOrMapLookup = function (name, id) {
        this.path += "." + name + "|" + id;
    };
    SerializationPath.prototype.appendPropertyLookup = function (name) {
        this.path += "." + name;
    };
    SerializationPath.prototype.toString = function () {
        return this.path;
    };
    return SerializationPath;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SerializationPath;
//# sourceMappingURL=SerializationPath.js.map