/**
 * Created by bert on 22.03.16.
 */

export interface MeteorInterface {
    Error? : {
        new( error: string | number, reason?: string, details?: string ): any;
    };
    users? : MongoCollectionInterface;
    wrapAsync? : (func:Function, context?:Object) => any;
    call?: (method:string, ...parameters:any[]) => void;
    methods? : (IMeteorMethodsDictionary:any) => any;
    startup? : ( a:()=>void ) => void;
    isServer? : boolean;
    isClient? : boolean;
    publish?: (name:string, f:( args:any ) => MongoCursorInterface)=>void;
    subscribe?: ( name:string ) => void;
}

interface ObjectIDStatic {
    new(hexString?: string): ObjectID;
}
interface ObjectID {
    _str?:string;
}

export interface MongoInterface {
    Collection?:{
        new( name:string ):MongoCollectionInterface;
    };
    ObjectID: ObjectIDStatic;
}

export interface MongoCollectionInterface {
    find(search:any):MongoCursorInterface;
    insert( obj:any );
    remove( id:string );
    update( pattern:any, data:any );
}

export interface MongoCursorInterface {
    fetch():any[];
}

var meteorReference:MeteorInterface;
var mongoReference:MongoInterface;
declare var Meteor:any;
declare var Mongo:any;

export function config( options:{ Meteor? : MeteorInterface, Mongo?: MongoInterface } ) {
    if( options.Meteor )
        meteorReference = options.Meteor;
    else
        meteorReference = <any>Meteor;

    if( options.Mongo ) {
        mongoReference = options.Mongo;
    } else{
        mongoReference = <any>Mongo;
    }
}

export function getMeteor():MeteorInterface{
    return meteorReference;
}

export function getMongo():MongoInterface{
    return mongoReference;
}