"use strict";
var omm = require("../annotations/PersistenceAnnotation");
var MeteorObjectRetriever_1 = require("./MeteorObjectRetriever");
var Serializer_1 = require("../serializer/Serializer");
var omm_event = require("../event/OmmEvent");
var Status_1 = require("./Status");
var Config = require("./Config");
var Collection = (function () {
    /**
     * Represents a Mongo collection that contains entities.
     * @param c {function} The constructor function of the entity class.
     * @param collectionName {string=} The name of the collection
     * @class
     * @memberof omm
     */
    function Collection(entityClass, collectionName) {
        this.eventListeners = {};
        this.objectRetriever = new MeteorObjectRetriever_1.default();
        this.serializer = new Serializer_1.default(this.objectRetriever);
        //var collectionName = omm.PersistenceAnnotation.getCollectionName(persistableClass);
        if (!collectionName)
            collectionName = omm.getDefaultCollectionName(entityClass);
        omm.addCollectionRoot(entityClass, collectionName);
        this.name = collectionName;
        if (!Collection.getByName(collectionName)) {
            // as it doesnt really matter which base collection is used in meteor-calls, we're just using the first that is created
            Collection.collections[collectionName] = this;
        }
        this.meteorCollection = Collection._getMeteorCollection(collectionName);
        this.theClass = entityClass;
    }
    Collection.prototype.removeAllListeners = function () {
        this.eventListeners = {};
    };
    Collection.getByName = function (s) {
        return Collection.collections[s];
    };
    Collection.prototype.preSave = function (f) {
        this.addListener("preSave", f);
    };
    Collection.prototype.onRemove = function (f) {
        this.addListener("didRemove", f);
    };
    Collection.prototype.preRemove = function (f) {
        this.addListener("willRemove", f);
    };
    Collection.prototype.onInsert = function (f) {
        this.addListener("didInsert", f);
    };
    Collection.prototype.preInsert = function (f) {
        this.addListener("willInsert", f);
    };
    Collection.prototype.addListener = function (topic, f) {
        if (!this.eventListeners[topic])
            this.eventListeners[topic] = [];
        this.eventListeners[topic].push(f);
    };
    Collection.prototype.emit = function (topic, data) {
        if (this.queue)
            this.queue.push({ topic: topic, data: data });
    };
    Collection.prototype.emitNow = function (t, evtCtx, data) {
        if (this.eventListeners[t]) {
            this.eventListeners[t].forEach(function (listener) {
                listener(evtCtx, data);
            });
        }
    };
    Collection.prototype.flushQueue = function () {
        if (this.queue) {
            this.queue.forEach(function (evt) {
                this.emitNow(evt.topic, evt.data);
            });
            this.queue = undefined;
        }
    };
    Collection.prototype.resetQueue = function () {
        this.queue = [];
    };
    Collection._getMeteorCollection = function (name) {
        if (!Collection.meteorCollections[name]) {
            if (name != "users") {
                Collection.meteorCollections[name] = new (Config.getMongo()).Collection(name);
            }
            else
                Collection.meteorCollections[name] = Config.getMeteor().users;
        }
        return Collection.meteorCollections[name];
    };
    /**
     * Gets the name of the collection.
     * @returns {string}
     */
    Collection.prototype.getName = function () {
        return this.name;
    };
    /**
     * Returns the underlying mongo collection.
     * @returns {any}
     */
    Collection.prototype.getMeteorCollection = function () {
        return this.meteorCollection;
    };
    /**
     * Loads an object from the collection by its id.
     * @param id {string} the id
     * @returns {T} the object or undefined if it wasn't found
     */
    Collection.prototype.getById = function (id) {
        var o = this.find({
            "_id": id
        });
        return o.length > 0 ? o[0] : undefined;
    };
    /**
     * Finds objects based on a selector.
     * @param {object} findCriteria the mongo selector
     * @returns {Array<T>}
     * @protected
     */
    Collection.prototype.find = function (findCriteria) {
        var documents = this.meteorCollection.find(findCriteria).fetch();
        var objects = [];
        for (var i = 0; i < documents.length; i++) {
            var document = documents[i];
            objects[i] = this.documentToObject(document);
        }
        return objects;
    };
    /**
     * Gets all objects in a collection.
     * @returns {Array<T>}
     */
    Collection.prototype.getAll = function () {
        return this.find({});
    };
    /**
     * Removes an entry from a collection
     * @param id {string} the id of the object to be removed from the collection
     * @callback cb the callback that's called once the object is removed or an error happend
     */
    Collection.prototype.remove = function (id, cb) {
        var ctx = new omm.EventContext(undefined, this);
        ctx.objectId = id;
        ctx.methodContext = Status_1.default.methodContext;
        this.emitNow("willRemove", ctx);
        if (ctx.cancelledWithError()) {
            if (cb)
                cb(ctx.cancelledWithError());
        }
        else {
            if (id) {
                this.meteorCollection.remove(id, cb);
                var o = this.getById(id);
                var c2 = new omm.EventContext(o, this);
                c2.methodContext = Status_1.default.methodContext;
                this.emitNow("didRemove", c2);
            }
            else
                throw new Error("Trying to remove an object that does not have an id.");
        }
    };
    Collection.prototype.documentToObject = function (doc) {
        var p = this.serializer.toObject(doc, this.theClass);
        this.objectRetriever.updateSerializationPaths(p);
        this.objectRetriever.retrieveLocalKeys(p);
        return p;
    };
    /**
     * Performs an update on an object in the collection. After the update the object is attempted to be saved to
     * the collection. If the object has changed between the time it was loaded and the time it is saved, the whole
     * process is repeated. This means that the updateFunction might be called more than once.
     * @param id - the id of the object
     * @param updateFunction - the function that alters the loaded object
     */
    Collection.prototype.update = function (id, updateFunction) {
        Status_1.default.updateInProgress = true;
        try {
            if (!id)
                throw new Error("Id missing");
            for (var i = 0; i < 10; i++) {
                omm_event.resetQueue();
                var document = this.meteorCollection.findOne({
                    _id: id
                });
                if (!document) {
                    throw new Error("No document found for id: " + id);
                }
                var currentSerial = document.serial;
                // call the update function
                var object = this.documentToObject(document);
                var result = updateFunction(object);
                this.objectRetriever.updateSerializationPaths(object);
                var ctx = new omm.EventContext(object, this);
                omm_event.callEventListeners(this.getEntityClass(), "preSave", ctx);
                var documentToSave = this.serializer.toDocument(object);
                documentToSave.serial = currentSerial + 1;
                // update the collection
                //console.log("writing document ", documentToSave);
                var updatedDocumentCount = this.meteorCollection.update({
                    _id: id,
                    serial: currentSerial
                }, documentToSave);
                // verify that that went well
                if (updatedDocumentCount == 1) {
                    return result; // we're done
                }
                else if (updatedDocumentCount > 1) {
                    var e = Config.getMeteor().Error;
                    throw new e("verifiedUpdate should only update one document");
                }
                else {
                }
            }
            throw new Error("update gave up after 10 attempts to update the object ");
        }
        finally {
            Status_1.default.updateInProgress = false;
        }
    };
    /**
     * callback is called once the object got inserted or an error happened
     * @callback omm.Collection~insertCallback
     * @param e {any} error
     * @param id {id=} string
     */
    /**
     * Inserts an object into the collection
     * @param p the object
     * @param {omm.Collection~insertCallback} callback
     * @returns {string} the id of the new object
     */
    Collection.prototype.insert = function (p, callback) {
        function afterwards(e, id) {
            if (!e) {
                //console.log( "inserted into '"+that.getName()+"' new id:"+id);
                p[idPropertyName] = id;
                that.objectRetriever.postToObject(p); // kind of the same thing?
            }
            else {
            }
            //console.log("didInsert");
            var ctx2 = new omm.EventContext(that.getById(id), this);
            ctx2.methodContext = Status_1.default.methodContext;
            that.emitNow("didInsert", ctx2);
            if (callback)
                callback(e, id);
        }
        var ctx = new omm.EventContext(p, this);
        ctx.methodContext = Status_1.default.methodContext;
        this.emitNow("willInsert", ctx);
        //console.log("inserting 2n");
        if (ctx.cancelledWithError()) {
            //console.log("insert cancelled ",ctx.cancelledWithError(), callback );
            if (callback)
                callback(ctx.cancelledWithError());
            return undefined;
        }
        else {
            //console.log("insert not cancelled");
            // TODO make sure that this is unique
            var idPropertyName = omm.PersistenceAnnotation.getIdPropertyName(this.theClass);
            if (!p[idPropertyName]) {
                p[idPropertyName] = new (Config.getMongo().ObjectID)()._str;
            }
            var doc = this.serializer.toDocument(p);
            //if( typeof p.getId=="function" && p.getId() )
            //    doc._id = p.getId();
            //else
            //    doc._id = ;
            doc.serial = 0;
            //console.log( "inserting document: ", doc);
            var that = this;
            try {
                var id = this.meteorCollection.insert(doc, callback ? afterwards : undefined);
                if (!callback)
                    afterwards(undefined, id);
                else
                    return id;
            }
            catch (e) {
                //console.log("error while inserting ",e);
                if (!callback)
                    afterwards(e);
            }
            return id;
        }
    };
    /**
     * called once the objects are removed or an error happens
     * @callback omm.Collection~resetAllCallback
     * @param error {any=} if an error occured it is passed to the callback
     */
    ///**
    // * removes all objects (for testing purposes)
    // * @param {omm.Collection~resetAllCallback} cb called when it's done
    // */
    //@omm.StaticMeteorMethod({replaceWithCall:true, parameterTypes:['callback']})
    //static resetAll( cb:(error?:any)=>void ){
    //    var arr:Array<any> = [];
    //    for( var i in Collection.meteorCollections )
    //        arr.push(Collection.meteorCollections[i]);
    //    if( arr.length>0 ){
    //        for( var j in arr )
    //        {
    //            if( parseInt(j)!=arr.length-1)
    //                Config.getMeteor().wrapAsync(function(cb2){
    //                    arr[j].remove({},cb2);
    //                })();
    //            else {
    //                arr[j].remove({}, cb);
    //            }
    //        }
    //    }
    //    else
    //        cb();
    //
    //}
    Collection.prototype.getEntityClass = function () {
        return this.theClass;
    };
    Collection.meteorCollections = {};
    Collection.collections = {};
    return Collection;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Collection;
//# sourceMappingURL=Collection.js.map