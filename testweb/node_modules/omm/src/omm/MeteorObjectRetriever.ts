
import MeteorPersistable from "./MeteorPersistable"
import {PersistenceAnnotation, setNonEnumerableProperty, getId} from "../annotations/PersistenceAnnotation"
import Serializer from "../serializer/Serializer"
import SerializationPath from "./SerializationPath"
import ObjectRetriever from "../serializer/ObjectRetriever"
import Collection from "./Collection"

export default class MeteorObjectRetriever implements ObjectRetriever {
    getId(object:MeteorPersistable):string {
        if (object._serializationPath)
            return object._serializationPath.toString();
        else {
            var objectClass = PersistenceAnnotation.getClass(object);
            var idPropertyName = PersistenceAnnotation.getIdPropertyName(objectClass);
            var id = object[idPropertyName];
            if (PersistenceAnnotation.isRootEntity(objectClass) && id) {
                return new SerializationPath(this, PersistenceAnnotation.getCollectionName(objectClass), id).toString();
            }
            else {
                throw new Error("Error while 'toString'. Objects that should be stored as foreign keys need to be persisted beforehand or be the root entity of a collection and have an id.");
            }
        }
    }

    getObject(s:string):Object {
        if (typeof s != "string")
            throw new Error("Path needs to be a string");
        var sPath = new SerializationPath(this, s);
        var collectionName = sPath.getCollectionName();
        var collection:Collection<Object> = collectionName ? Collection.getByName( collectionName ) : undefined;
        if (collection) {
            var rootValue = collection.getById(sPath.getId());
            var newValue = rootValue ? sPath.getSubObject(rootValue) : undefined;
            return newValue;
        }
        else
            throw new Error("No collection found to retrieve object. Key:" + s);
    }

    preToDocument( o:Object ){
        // noop
    }

    postToObject( o:Object ){
        this.updateSerializationPaths(o);
        this.retrieveLocalKeys(o);
    }

    private setSerializationPath( o:MeteorPersistable, pPath:SerializationPath ){
        setNonEnumerableProperty(o, "_serializationPath", pPath);
        setNonEnumerableProperty(o, "_objectRetriever", this);
    }

    // if I could I would make this package protected
    updateSerializationPaths(object:MeteorPersistable, visited?:Array<Object>):void {
        var that = this;
        if (!visited)
            visited = [];
        if (visited.indexOf(object) != -1)
            return;
        if( !object || typeof object!="object" )
            return;

        visited.push(object);
        var objectClass = PersistenceAnnotation.getClass(object);
        if (PersistenceAnnotation.isRootEntity(objectClass)) {
            if (!object._serializationPath) {
                var idPropertyName = PersistenceAnnotation.getIdPropertyName(objectClass);
                var id = object[idPropertyName];
                if ( id )
                    this.setSerializationPath( object, new SerializationPath(this, PersistenceAnnotation.getCollectionName(objectClass), id) );
            }
        }
        if (!object._serializationPath)
            return; // we're done here


        PersistenceAnnotation.getTypedPropertyNames(objectClass).forEach(function (typedPropertyName:string) {
            if (!PersistenceAnnotation.isStoredAsForeignKeys(objectClass, typedPropertyName)) {
                //console.log("updating foreignkey property " + typedPropertyName);
                var v:MeteorPersistable = object[typedPropertyName];
                if (v) {
                    if (PersistenceAnnotation.isArrayOrMap(objectClass, typedPropertyName)) {
                        //console.log("updating foreignkey property " + typedPropertyName + " is array");
                        for (var i in v) {
                            var e = v[i];
                            if( e ) {
                                var index = i;
                                if (getId(e))
                                    index = getId(e);
                                //console.log("updating persistnece path for isArrayOrMap " + typedPropertyName + "  key:" + i + " value:", e, "object: ", object);
                                that.setSerializationPath(e, object._serializationPath.clone());
                                e._serializationPath.appendArrayOrMapLookup(typedPropertyName, index);
                                that.updateSerializationPaths(e, visited);
                            }
                        }
                    }
                    else {
                        //console.log("updating foreignkey property direct property " + typedPropertyName);
                        that.setSerializationPath( v, object._serializationPath.clone() );
                        v._serializationPath.appendPropertyLookup(typedPropertyName);
                        that.updateSerializationPaths(v, visited);
                    }
                }

            }
            else {
                //console.log( "foreign key "+typedPropertyName );
                if (!Serializer.needsLazyLoading(object, typedPropertyName)) {
                    var v:MeteorPersistable = object[typedPropertyName];
                    if (v) {
                        if (PersistenceAnnotation.isArrayOrMap(objectClass, typedPropertyName)) {
                            for (var i in v) {
                                var e = v[i];
                                if ( e && !e._serializationPath) {
                                    //console.log("non- foreign key array/map entry key:"+i+" value:"+e);
                                    that.updateSerializationPaths(e, visited);
                                }
                            }
                        }
                        else if (!v._serializationPath)
                            that.updateSerializationPaths(v, visited);
                    }
                }
            }
        });
    }


    retrieveLocalKeys(o:MeteorPersistable, visited?:Array<Object>, rootObject?:MeteorPersistable):void {
        if( !o )
            return;
        if( !visited )
            visited = [];
        if( visited.indexOf(o)!=-1 )
            return;
        visited.push(o);
        var that = this;
        if( !rootObject )
            rootObject = o;
        var theClass = PersistenceAnnotation.getClass(o);
        //console.log("Retrieving local keys for ",o," class: ", theClass);
        var spp = rootObject._serializationPath;
        if( spp ){ // can only retrieve local keys if there is a definition of what "local" means.
            var that = this;
            PersistenceAnnotation.getTypedPropertyNames(theClass).forEach( function( properyName:string ){
                //console.log("Retrieviing local keys for property "+properyName);
                var isKeys = PersistenceAnnotation.isStoredAsForeignKeys(theClass, properyName);
                var needsLazyLoading = Serializer.needsLazyLoading(o, properyName);
                var isArray = PersistenceAnnotation.isArrayOrMap(theClass, properyName );
                if( isKeys && needsLazyLoading && !isArray ){
                    var key:string = o["_"+properyName];

                    // this is where it is determined if an object is local
                    var pp:SerializationPath = new SerializationPath(this, key);
                    if( pp.getCollectionName()==spp.getCollectionName() && pp.getId()==spp.getId() ) {
                        //console.log("found a local key :"+properyName);
                        o[properyName] = pp.getSubObject(rootObject);
                    }
                }
                // TODO support arrays
                if(!Serializer.needsLazyLoading(o, properyName) )
                {
                    if( isArray )
                    {
                        for( var i in o[properyName] ) {
                            that.retrieveLocalKeys(o[properyName][i], visited, rootObject);
                        }
                    }
                    else
                        that.retrieveLocalKeys(o[properyName], visited, rootObject);
                }
            } );
        }
    }

}